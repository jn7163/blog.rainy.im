<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yu's Tech Lab - Node</title><link href="http://blog.rainy.im/" rel="alternate"></link><link href="http://blog.rainy.im/feeds/node.atom.xml" rel="self"></link><id>http://blog.rainy.im/</id><updated>2015-05-30T12:39:36+08:00</updated><entry><title>D-Day 杭州一日行程记录</title><link href="http://blog.rainy.im/2015/05/30/d-day-hangzhou/" rel="alternate"></link><published>2015-05-30T12:39:36+08:00</published><updated>2015-05-30T12:39:36+08:00</updated><author><name>Yusheng</name></author><id>tag:blog.rainy.im,2015-05-30:/2015/05/30/d-day-hangzhou/</id><summary type="html">&lt;p&gt;今天去了 &lt;a href="http://sf.gg"&gt;segmentfault&lt;/a&gt; 的 D-Day 杭州，三周年技术大会，简单记录一下一天的行程与收获。&lt;/p&gt;</summary><content type="html">&lt;p&gt;今天去了 &lt;a href="http://sf.gg"&gt;segmentfault&lt;/a&gt; 的 D-Day 杭州，三周年技术大会，简单记录一下一天的行程与收获。&lt;/p&gt;
&lt;p&gt;&lt;img alt="d-day" src="http://segmentfault.com/img/bVlXcb"&gt;&lt;/p&gt;
&lt;p&gt;这次来报名参加主要是奔着移动开发跟 react 相关的报告去的，最近前端果然是炙手可热，下午前端分会场直接爆满挤都挤不进去。&lt;/p&gt;
&lt;p&gt;&lt;img alt="frontend" src="http://segmentfault.com/img/bVlXce"&gt;&lt;/p&gt;
&lt;p&gt;首先说会场设施安排，好歹也是收了102.4的报名费，现场不但不提供WIFI，而且到处都是各种传单，愣是连一张会场日程的目录都没有。不过茶歇的零食还是很充足的。&lt;/p&gt;
&lt;p&gt;上午第一个 SegmentFault CTO 祁宁的后端开场演讲还是有很多干货的，介绍 segmentfault 从一开始一个人一台 VPS 逐渐迁移到云服务上，分享了创业过程中遇到的一些技术问题以及解决方案等，非常适合刚刚开始创业或者正打算创业的小伙伴参考借鉴。而且更重要的是他用 segmentfault 作为活生生的例子告诉我们，如果有创业的想法或者很棒的 idea，其实创业的成本并没有想象中那么高，只要开始动手做，把遇到的问题当做是历练自己的考验，总能完成从0到1的飞跃。&lt;/p&gt;
&lt;p&gt;第二场《移动 App 技术架构的“四段论”》，我就不知道该说什么了。我们在学校自己都做过 presentation，也听过无数次别人的报告，如果演讲的人没有用心准备，PPT 还要看一页想一会，演讲内容前后啰嗦充满了没有实质性意义的零碎词汇，这对听众来说非常好辨认，因为你自己都不知道在说什么，听众更是听得云里雾里。我不知道主讲嘉宾是因为什么特殊情况导致今天这样的状态，当然也有可能是内容太高深我没有听懂，但还是希望主办方能够把控一下演讲嘉宾的状况，不然浪费所有人的时间真的是一件很让人恼火的事情。&lt;/p&gt;
&lt;p&gt;接下来是玉伯的《如何打造优秀的技术产品》，我记得上一次杭·JS玉伯大哥讲得是个人情绪控制……这次是穿插着一些js社区的“宫斗黑幕”等，涵盖了企业中人才培养以及其它深奥的哲学问题等……说实在的提到的很多内容还是很有启发性很值得深思的，已经脱离了简单的技术层面的细节了。只不过由于口音问题有些句子比较难follow，只能听个一知半解吧。&lt;/p&gt;
&lt;p&gt;下午先听了移动分会场，网易云音乐的基于 Webkit 的 Hybrid Mac App，我最近在做的一个项目可能用得上，因此听得比较仔细。主要介绍了在 Mac 系统中调用系统 Webkit，实现 Native 跟 Js App 的通信、交互以及安全性操作等。因为我本来也是要做Linux中基于 Web 的 Hybrid App，C++ 跟 Js 的交互我有尝试用 Websocket 去通信，因此在 QA 环节有向主讲提问，但是似乎他们并没有试用过类似的方法，而且我也觉得 C++ 做 Websocket client 还要再建 Websocket server 挺麻烦的，因此可能会先尝试一下他们的方法，只是不知道在 Linux 环境下 Webkit 的封装是否方便。&lt;/p&gt;
&lt;p&gt;后面两场分别听了《天猫 React Native 实践与探索》跟《基于 React.js 的大规模网站开发实践》，来自 Facebook 的 React 最近确实红得发紫，天猫客户端敢率先尝试线上产品试用确实够胆。在此之前我还没有对 react native 进行深入了解，但从主讲嘉宾的实践经验来看，性能跟稳定性可以介于 Native 与 Web App 之间，同时又兼具了 Web 开发的优势，感觉确实很值得尝试一下。等下半年 Android 版本放出再来做做试试，在此之前还是先熟悉一下 react.js 的部分。来自蘑菇街的《基于 React.js 的大规模网站开发实践》算是对 react.js 的一个入门介绍，标题中的“大规模”并不是指淘宝这种大流量的网站，而是指大量使用 react 框架的意思……主讲内容其实跟 react 官网实例差不太多，我本来是想听关于 react 使用中 flux 架构的一些实践以及大家对前后端分离的实践状况，看来这次并没有这个机会。&lt;/p&gt;
&lt;p&gt;总的来说今天还是有所收获，包括体验了一把功夫熊的推拿服务！&lt;/p&gt;</content><category term="Node"></category><category term="React"></category></entry><entry><title>用树莓派搭建网络摄像头</title><link href="http://blog.rainy.im/2015/05/26/webcam-on-raspberry-pi/" rel="alternate"></link><published>2015-05-26T13:47:58+08:00</published><updated>2015-05-26T13:47:58+08:00</updated><author><name>Yusheng</name></author><id>tag:blog.rainy.im,2015-05-26:/2015/05/26/webcam-on-raspberry-pi/</id><summary type="html">&lt;p&gt;用树莓派加上相机模块，可以实现实时监控的功能，再将时时视频流导入到 Web 界面中，就变成简单的网络摄像头（Webcam）。Web 端用 Nodejs + WebSocket，既可以进行实时播放，同时又方便进功能的扩展。&lt;/p&gt;</summary><content type="html">&lt;p&gt;用树莓派加上相机模块，可以实现实时监控的功能，再将时时视频流导入到 Web 界面中，就变成简单的网络摄像头（Webcam）。Web 端用 Nodejs + WebSocket，既可以进行实时播放，同时又方便进功能的扩展。&lt;/p&gt;
&lt;p&gt;&lt;img alt="raspberry pi 2b" src="http://7xiijd.com1.z0.glb.clouddn.com/raspberry-pi-2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.raspberrypi.org/products/raspberry-pi-2-model-b/"&gt;Raspberry PI 2B&lt;/a&gt; 在硬件上比第一代有很大提升，多了两个 USB 接口，存储换成了 Micro SD。&lt;a href="https://www.raspberrypi.org/products/camera-module/"&gt;摄像模块&lt;/a&gt; 支持1&amp;amp;2代，通过 HDMI 旁边的 CSI CONNECTOR 接口接入。&lt;/p&gt;
&lt;p&gt;下面介绍 Webcam 的搭建过程。&lt;/p&gt;
&lt;h3&gt;1. 安装 Raspbian 操作系统&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.raspberrypi.org/downloads/"&gt;官方下载&lt;/a&gt; 系统镜像，&lt;a href="https://www.raspberrypi.org/documentation/installation/installing-images/mac.md"&gt;Mac 系统&lt;/a&gt;下刻制系统镜像到 SD 卡中的步骤如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 1. &lt;/span&gt;
diskutil list

&lt;span class="c1"&gt;# 查看 SD 卡所属文件&lt;/span&gt;
&lt;span class="c1"&gt;#/dev/disk2&lt;/span&gt;
&lt;span class="c1"&gt;#   #:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;
&lt;span class="c1"&gt;#   0:     FDisk_partition_scheme                        *7.9 GB     disk2&lt;/span&gt;
&lt;span class="c1"&gt;#   1:                 DOS_FAT_32 NO NAME                 7.9 GB     disk2s1&lt;/span&gt;

&lt;span class="c1"&gt;# 2.&lt;/span&gt;
diskutil unmountDisk /dev/disk2

&lt;span class="c1"&gt;#Unmount of all volumes on disk2 was successful&lt;/span&gt;

&lt;span class="c1"&gt;# 3.&lt;/span&gt;
sudo dd &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1m &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2015-05-05-raspbian-wheezy.img &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/disk2
&lt;span class="c1"&gt;# 这一步可能会需要相当长的时间&lt;/span&gt;

&lt;span class="c1"&gt;# 3125+0 records in&lt;/span&gt;
&lt;span class="c1"&gt;# 3125+0 records out&lt;/span&gt;
&lt;span class="c1"&gt;# 3276800000 bytes transferred in 1562.948501 secs (2096550 bytes/sec)&lt;/span&gt;

&lt;span class="c1"&gt;# 4.&lt;/span&gt;
sudo diskutil eject /dev/disk2
&lt;span class="c1"&gt;# Disk /dev/disk2 ejected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;刻制完成后可以将 SD 卡插入 PI 的卡槽中，通电即可开机（第一次还是需要用 HDMI 接显示器，操作更方便一些）。&lt;/p&gt;
&lt;h3&gt;2. 系统配置&lt;/h3&gt;
&lt;p&gt;第一次进入 raspbian 系统需要进行相关系统配置&lt;code&gt;sudo raspi-config&lt;/code&gt;，包括选择使用全部 SD 卡作为系统存储、开启 Camera module 等选项：&lt;/p&gt;
&lt;p&gt;&lt;img alt="raspi_config" src="http://7xiijd.com1.z0.glb.clouddn.com/raspi_config.png"&gt;&lt;/p&gt;
&lt;p&gt;插入 USB WIFI 后，配置 WIFI 连接，参考 &lt;a href="https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md"&gt;SETTING WIFI UP VIA THE COMMAND LINE&lt;/a&gt;。最后，更新一下源（推荐 &lt;a href="http://mirrors.zju.edu.cn"&gt;mirrors.zju.edu.cn&lt;/a&gt; &lt;code&gt;:D&lt;/code&gt;，或者&lt;a href="http://mirrors.aliyun.com/help/raspbian"&gt;阿里云&lt;/a&gt;）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo nano /etc/apt/sourses.list

&lt;span class="c1"&gt;# deb http://mirrors.zju.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi&lt;/span&gt;
&lt;span class="c1"&gt;# deb-src http://mirrors.zju.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi&lt;/span&gt;

sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Camera module 操作指令&lt;/h3&gt;
&lt;p&gt;raspbian 中系统自带对摄像头的操作指令，分别是&lt;code&gt;raspistill, raspivid &amp;amp; raspistillyuv&lt;/code&gt;（这里有&lt;a href="https://www.raspberrypi.org/wp-content/uploads/2013/07/RaspiCam-Documentation.pdf"&gt;官方详细文档&lt;/a&gt;），其中 &lt;code&gt;raspivid&lt;/code&gt; 是获取视频流的指令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 捕捉 5s 视频并输出到 video.h264，视频尺寸为 320x240&lt;/span&gt;
raspivid -t &lt;span class="m"&gt;5000&lt;/span&gt; -w &lt;span class="m"&gt;320&lt;/span&gt; -h &lt;span class="m"&gt;240&lt;/span&gt; -o video.h264

&lt;span class="c1"&gt;# 实时监控并输出到 stdout&lt;/span&gt;
raspivid -t &lt;span class="m"&gt;0&lt;/span&gt; -w &lt;span class="m"&gt;320&lt;/span&gt; -h &lt;span class="m"&gt;240&lt;/span&gt; -o -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获取实时监控之后的视频流输出之后，可以通过 ffmpeg 转化视频格式，输出到监听服务器。&lt;/p&gt;
&lt;h3&gt;4. 安装 Nodejs/ffmpeg&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 1. install nodejs&lt;/span&gt;
wget http://node-arm.herokuapp.com/node_latest_armhf.deb
sudo dpkg -i node_latest_armhf.deb
node -v

&lt;span class="c1"&gt;# 2. install ffmpeg&lt;/span&gt;
&lt;span class="c1"&gt;## libx264 support&lt;/span&gt;
git clone git://git.videolan.org/x264
&lt;span class="nb"&gt;cd&lt;/span&gt; x264
./configure --host&lt;span class="o"&gt;=&lt;/span&gt;arm-unknown-linux-gnueabi --enable-static --disable-opencl
make
sudo make install

&lt;span class="c1"&gt;## ffmpeg&lt;/span&gt;
git clone git://git.ffmpeg.org/ffmpeg
&lt;span class="nb"&gt;cd&lt;/span&gt; ffmpeg
sudo ./configure --arch&lt;span class="o"&gt;=&lt;/span&gt;armel --target-os&lt;span class="o"&gt;=&lt;/span&gt;linux --enable-gpl --enable-libx264 --enable-nonfree
make &lt;span class="c1"&gt;# 这一步可能相当相当漫长，在我这里跑了有一个多小时&lt;/span&gt;
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5. Webcam&lt;/h3&gt;
&lt;p&gt;通过 ffmpeg 转换视频格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;raspivid -t &lt;span class="m"&gt;0&lt;/span&gt; -w &lt;span class="m"&gt;320&lt;/span&gt; -h &lt;span class="m"&gt;240&lt;/span&gt; -o - &lt;span class="p"&gt;|&lt;/span&gt; ffmpeg -i - -s 320x240 -f mpeg1video &lt;span class="se"&gt;\&lt;/span&gt;
-b 800k -r &lt;span class="m"&gt;30&lt;/span&gt; http://127.0.0.1:8082/yourpassword
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同时创建 Node server 监听 &lt;code&gt;http://127.0.0.1:8082&lt;/code&gt;（参考：&lt;a href="https://github.com/phoboslab/jsmpeg"&gt;jsmpeg&lt;/a&gt;）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/phoboslab/jsmpeg.git webcam
&lt;span class="nb"&gt;cd&lt;/span&gt; webcam &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; node stream-server.js yourpassword

&lt;span class="c1"&gt;# Listening for MPEG Stream on http://127.0.0.1:8082/&amp;lt;secret&amp;gt;/&amp;lt;width&amp;gt;/&amp;lt;height&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# Awaiting WebSocket connections on ws://127.0.0.1:8084/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后打开&lt;code&gt;stream-example.html&lt;/code&gt;就可以看到实时监控画面了，如果是远程调试需要稍作更改：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# edit stream-example.html&lt;/span&gt;
var &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; new WebSocket&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ws://RASPI_LOCAL_IP:8084/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        var &lt;span class="nv"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; new jsmpeg&lt;span class="o"&gt;(&lt;/span&gt;client, &lt;span class="o"&gt;{&lt;/span&gt;canvas:canvas&lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# @/path/to/webcam&lt;/span&gt;
python -m SimpleHTTPServer 8080

&lt;span class="c1"&gt;# in your browser&lt;/span&gt;
http://RASPI_LOCAL_IP:8080
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.andrewconnell.com/blog/setup-node-js-on-raspberry-pi-2-b"&gt;Setup Node.js on Raspberry Pi 2 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jeffreythompson.org/blog/2014/11/13/installing-ffmpeg-for-raspberry-pi/"&gt;Installing FFMPEG for Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phoboslab.org/log/2013/09/html5-live-video-streaming-via-websockets"&gt;HTML5 LIVE VIDEO STREAMING VIA WEBSOCKETS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Node"></category><category term="PI"></category></entry></feed>